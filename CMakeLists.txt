# Base
CMAKE_MINIMUM_REQUIRED(VERSION 3.5)
PROJECT(main VERSION 1.0 LANGUAGES C)


# Compile_commands for clang lsp
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Detect architecture
IF(CMAKE_SIZEOF_VOID_P STREQUAL "4")
    set(ARCHITECTURE "x86")
ELSEIF(CMAKE_SIZEOF_VOID_P STREQUAL "8")
    set(ARCHITECTURE  "x64")
ENDIF()
MESSAGE(STATUS "Architecture: ${ARCHITECTURE}")

# Detect compiler
IF (CMAKE_C_COMPILER_ID STREQUAL "Clang")
    SET(COMPILER "Clang")
ELSEIF (CMAKE_C_COMPILER_ID STREQUAL "GNU")
    SET(COMPILER "GNU")
ELSEIF (CMAKE_C_COMPILER_ID STREQUAL "MSVC")
    SET(COMPILER "MSVC")
ELSE()
    SET(COMPILER "UNKNOWN")
ENDIF()
MESSAGE(STATUS "Compiler: ${COMPILER}")

# Add project files
FILE(GLOB PROJECT_FILES ${PROJECT_SOURCE_DIR}/src/*.c)

# Project files
ADD_EXECUTABLE(${PROJECT_NAME} ${PROJECT_FILES})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/src)


# OpenGl
FIND_PACKAGE(OpenGL REQUIRED)


# SDL
IF (WIN32)
    FIND_PACKAGE(SDL2 PATHS ${PROJECT_SOURCE_DIR}/dependencies/SDL2/cmake CONFIG REQUIRED)
    FIND_PACKAGE(SDL2_ttf PATHS ${PROJECT_SOURCE_DIR}/dependencies/SDL2_ttf/cmake REQUIRED)

    # if (COMPILER STREQUAL "MSVC")
    #     SET(SDL_DLL_DESTINATION ${PROJECT_SOURCE_DIR}/build/Debug/)
    # ELSE()
    #     SET(SDL_DLL_DESTINATION ${PROJECT_SOURCE_DIR}/build/)
    # ENDIF()
    SET(SDL_DLL_DESTINATION ${PROJECT_SOURCE_DIR}/build/)

    IF(ARCHITECTURE STREQUAL "x64")
        SET(SDL_DLL_DIR ${PROJECT_SOURCE_DIR}/dependencies/SDL2/lib/x64/SDL2.dll)
        SET(SDLTFF_DLL_DIR ${PROJECT_SOURCE_DIR}/dependencies/SDL2_ttf/lib/x64/SDL2_ttf.dll)
    ELSEIF(ARCHITECTURE STREQUAL "x86")
        SET(SDL_DLL_DIR ${PROJECT_SOURCE_DIR}/dependencies/SDL2/lib/x86/SDL2.dll)
        SET(SDLTFF_DLL_DIR ${PROJECT_SOURCE_DIR}/dependencies/SDL2_ttf/lib/x86/SDL2_ttf.dll)
        ENDIF()

    FILE(COPY ${SDL_DLL_DIR}  DESTINATION ${SDL_DLL_DESTINATION})
    FILE(COPY ${SDLTFF_DLL_DIR} DESTINATION ${SDL_DLL_DESTINATION})
ELSE()
    FIND_PACKAGE(SDL2 CONFIG REQUIRED)
    FIND_PACKAGE(SDL2_ttf REQUIRED)
ENDIF()

INCLUDE_DIRECTORIES(${SDL2_INCLUDE_DIRS}/SDL2)

# Linking
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
                      ${OPENGL_LIBRARY}
                      ${SDL2_LIBRARIES}
                      SDL2_ttf::SDL2_ttf
                      )
